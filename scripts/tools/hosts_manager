#!/bin/bash -
###############################################################################
# This is still a work in progress. I want to make this handle both custom host
# files.
# TODO:
# * Consider a lock to prevent races between add_host and rm_host. $ACTIVE_FLAG
#   might make a good lock.
# * $HOME env variable and consequently the $HOST_DIR env variable. Potentially
#   {add,rm}_host may act on different files to {start,stop}_block. Note that
#   this won't present itself if you only use sudo.
###############################################################################

# Unoffical Bash "strict mode"
# http://redsymbol.net/articles/unofficial-bash-strict-mode/
set -euo pipefail
#ORIGINAL_IFS=$IFS
IFS=$'\t\n' # Stricter IFS settings

###############################################################################
# Variables
###############################################################################

# Put the original in the dotfiles repo, so it shows up with git status
HOST_DIR="$HOME/dotfiles/hosts_profiles"

# Create HOST_DIR if doesn't exist
mkdir -p $HOST_DIR

# Actual host file to be swapped around.
HOST_FILE="/etc/hosts"

# Original host file without any of the appended blocked hosts.
# Store the original file in the etc dir so others can find it.
ORIG_FILE="$HOST_DIR/hosts_original"

# Suffix added to the profile names when writting files
HOST_PROFILES_SUFFIX="_hosts"

# The pattern used to filter files in the $HOST_DIR
HOST_PROFILES_PATTERN="*$HOST_PROFILES_SUFFIX"

# Temporary file used when removing hosts.
BLCK_TEMP=$(mktemp -t "blocked_hosts") || $(mktemp /tmp/blocked_hosts.XXXXXXX)

get_current_profile()
{
    first_line=$(head -n 1 $HOST_FILE)
    OFIS="$IFS"
    IFS=':' read -ra line <<< "$first_line" IFS="$OFIS"
    line_segments=${#line[@]}
    if (( line_segments > 1 )); then
        prefix=${$line[0]}
        IFS=' ' prefix_length=${#$(prefix)[@]} IFS="$OFIS"
        profile=${$line[1]}
        echo $prefix
        echo $profile
        # TODO: Should return the name of the current profile if one is set.
    fi
    # Otherwise, no profile
}

# Set IS_ACTIVE based on whether or not a custom profile is currently set
if [[ "$(get_current_profile)" = "" ]]; then
    IS_ACTIVE=0
else
    IS_ACTIVE=1
fi

usage()
{
    cat <<EOF
    Usage: hosts_manager  [command]

    Commands:
    profiles                   list all the profiles in $HOST_DIR
    show [profile ...]         list blocked hosts in profile
    add [profile, host ...]    add a host to be blocked
    rm [profile, host ...]     remove hosts from profile
    start [profile ...]        start blocking
    stop [profile ...]         stop blocking
EOF

    if [[ $IS_ACTIVE = 1 ]]; then
        cat << EOF

    Current Profile: $(get_current_profile)
EOF
    else
        cat << EOF

    No profile set
EOF
    fi
}

backup_original() {
    if [[ $IS_ACTIVE = 0 ]]; then
        cp $HOST_FILE $ORIG_FILE
    fi
}

add_host()
{
    local hosts=("$@")
    local profile=$0
    local profile_file=$profile$HOST_PROFILES_SUFFIX

    for host in "${hosts[@]:1}"; do
        # append host to blocked hosts list
        echo "127.0.0.1 $host" >> "$profile_file"
        echo -e "\033[0;32madded\033[0m $host"
    done
}

# todo: remove need for loop; do in one go
rm_host()
{
    local hosts=("$@")
    local profile=$0
    local profile_file=$profile$HOST_PROFILES_SUFFIX

    for host in "${hosts[@]:1}"; do
        # overwrite host list file with a copy removing a certain host
        awk -v host=$host 'NF==2 && $2!=host { print }' "$profile_file" > "$BLCK_TEMP"
        mv "$BLCK_TEMP" "$profile_file"
        echo -e "\033[0;31mremoved\033[0m $host"
    done
}

check_root()
{
    if [[ "$(whoami)" != "root" ]]; then
        echo "You don't have sufficient priviledges to run this script (try sudo.)"
        exit 1
    else
        [[ -e $HOST_FILE ]] || { echo "Can't find or access host file."; exit 1; }
    fi
}

start_block()
{
    local profile=$0
    local profile_file=$profile$HOST_PROFILES_SUFFIX

    if [[ $IS_ACTIVE -ne 0 ]]; then
        cp "$HOST_FILE" "$ORIG_FILE"
        cat "$profile_file" >> "$HOST_FILE"
        touch "$ACTIVE_FLAG"
        echo "Block started."
    else
        echo "Already blocking."
    fi
}

stop_block()
{
    if [[ $IS_ACTIVE -eq 0 ]]; then
        cp "$ORIG_FILE" "$HOST_FILE"
        [[ -e $ACTIVE_FLAG ]] && rm "$ACTIVE_FLAG"
        echo "Stopped blocking."
    else
        echo "Not blocking."
    fi
}

get_profiles()
{
    find -L $HOST_DIR -name "$HOST_PROFILES_PATTERN" | xargs basename | cat
}

show_profile()
{
    profile=$1

    # Use cat to print the contents of the file
    cat $HOST_DIR/$profile$HOST_PROFILES_SUFFIX
}

while getopts :a FLAG; do
    case $FLAG in
        \?)
            echo $FLAG
            echo $OPTARG;;
    esac
done

if [ $# -gt 0 ]; then
    case $1 in
        'show')
            profile=$2
            show_profile $profile;;
        'add')
            [[ -z $2 ]] && { usage; exit 1; }
            add_host $@;;
        'rm' | 'remove')
            [[ -z $2 ]] && { usage; exit 1; }
            rm_host $@;;
        'start')
            check_root
            start_block $2;;
        'stop')
            check_root
            stop_block;;
        'ls' | 'list' | 'profiles')
            get_profiles;;
        *)
            usage;;
    esac
else
    usage;
fi
