snippet pry "Insert IEx.pry call into Elixir code"
require IEx; IEx.pry
endsnippet

snippet shebang "The Elixir shebang line I typically use"
#!/usr/bin/env elixir
endsnippet

snippet dbgcalls "Add dbg tracing code for tracing calls in the current process"
:dbg.tracer()
:dbg.p(${1:self()}, [:c])
:dbg.tpl(${2::_}, ${3::_}, [{:_, [], [{:return_trace}]}])
endsnippet

snippet dbgall "Add dbg tracing code for all types of events for the current process"
:dbg.tracer()
:dbg.p(${1:self()}, [:all])
:dbg.tpl(${2::_}, ${3::_}, [{:_, [], [{:return_trace}]}])
endsnippet

snippet dbgstop "Stop and clear dbg tracing"
:dbg.stop_clear()
endsnippet

# https://jasonaxelson.com/talks/elixirconf2022/#/33
snippet k "Key and value"
$1: $1
endsnippet

snippet lin "Labeled inspect"
IO.inspect($1, label: "$1 - #{__ENV__.line}")
endsnippet

snippet pin "Pipe inspect"
|> IO.inspect(label: "$1 - #{__ENV__.line}")
endsnippet

snippet logi "Log inspect"
Logger.info("$1: #{inspect($1, pretty: true)}")
endsnippet

snippet lintignore "Disable a credo check for the next line"
# credo:disable-for-next-line Credo.$1
endsnippet
