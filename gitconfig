[alias]
  # Better version of the stash list command
  # Taken from https://stackoverflow.com/a/38826108/1245380
  sl = stash list --format='%C(red)%h%C(reset) - %C(yellow)(%C(bold magenta)%gd%C(yellow))%C(reset) %<(70,trunc)%s %C(green)(%cr) %C(bold blue)%C(reset)'

  # Shorten a few common commands
  comt = commit-ticket
  comjt = commit-jira-ticket

  # Stash all files, including untracked files and directories
  stash-all = stash save --include-untracked

  # Soft reset to get to the way things were before the last commit was made
  undo = reset --soft HEAD^

  # Show the branches, ordered by most recently updated closest to prompt.
  # Also shows the last commit and committer for each branch listed.
  recent = for-each-ref --sort=committerdate refs/heads/ --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'

  # Graph/Log aliases
  lp = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  ll = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  graph = log --graph --all --decorate --stat --date=iso
  graph1 = log --date-order --decorate --graph --oneline --no-show-signature
[color]
  branch = auto
  diff = auto
  status = auto
[status]
  # git status is a command I use a lot. The default command output contains
  # information I don't need to see.
  short = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red
  new = cyan
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[core]
  # Global gitignore rules
  excludesfile = ~/.gitignore_global

  # Global gitattributes file
  attributesFile = ~/.gitattributes

  # Pay attention to case, even on OSX
  ignorecase = false

  # Better diff of changes
  #pager = diff-so-fancy | less --tabs=4 -RFX --pattern '^(Date|added|deleted|modified): '
  #pager = diff-so-fancy | less --tabs=4 -RFX
  pager = diff-so-fancy | less
[pager]
  # Don't use pager when listing branches
  # Taken from https://stackoverflow.com/a/48370253/1245380
  branch = false
[status]
  # Show status of git submodules in git status output
  submoduleSummary = true
[diff]
  # Show submodules changes in diffs as a list of commits like `git log` shows
  submodule = log

  # Default tool for resolving conflicts
  tool = vimdiff3
[fetch]
  # Push push submodule changes to the remote before pushing the main project.
  # If a submodule fails to push the main project will not be pushed.
  recurseSubmodules = on-demand
[init]
  # Directory for Git templates
  templatedir = ~/dotfiles/git/templates
[push]
  # Push branch to remote branch with same name
  default = current
[pull]
  # Don't flatten locally created merge commits when rebasing
  rebase = merges
[merge]
  # Standard diff is two sets of final changes. This introduces the change
  # present in the common ancestor of both conflicting commits.
  conflictstyle = diff3

  # Always create a merge commit when merging
  ff = false
[rebase]
  # Always auto squash when rebasing
  autosquash = true

  # Automatically stash local changes when rebasing
  autostash = true
[branch]
  # When checking out branches locally make them always track the remote branch
  autosetupmerge = always
[commit]
  # Show the diff below the commit message for context when writing the message
  verbose = true

  # Template for new commit messages
  template = ~/dotfiles/templates/commit-template

# Configuration various diffs of various file types
[diff "exif"]
  textconv = exiftool
# https://tech.marksblogg.com/git-track-changes-in-media-office-documents.html
# https://ongardie.net/blog/sqlite-in-git/
[diff "word"]
  textconv=pandoc --to=markdown
  binary=true
  prompt=false

[diff "powerpoint"]
  textconv=~/dotfiles/officediff/bin/python3 ~/dotfiles/officediff/pptx-dump.py
  binary=true

[diff "excel"]
  textconv=~/dotfiles/officediff/bin/python3 ~/dotfiles/officediff/xlsx-dump.py
  binary=true

[diff "pdf"]
  textconv=~/dotfiles/officediff/bin/python3 ~/dotfiles/officediff/pdf-dump.py
  binary=true
