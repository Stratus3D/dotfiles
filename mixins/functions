function psgrep() {
  ps auxf | grep -v grep | grep "$@" -i
}

function fname() {
  find . -iname "*$@*"
}

function remove_lines_from() {
  # Removes lines from $1 if they appear in $2
  grep -F -x -v -f $2 $1
}

function mkcd() {
  mkdir $1 && cd $1
}

# Read STDIN as JSON and print to STDOUT as YAML
function json_to_yaml() {
	ruby -ryaml -rjson -e 'puts YAML.dump(JSON.parse(STDIN.read))'
}

# Read STDIN as YAML and print to STDOUT as JSON
function yaml_to_json() {
	ruby -ryaml -rjson -e 'puts YAML.load(STDIN.read).to_json'
}

# Easily create a temp directory and cd into it for quick experiments
function t {
  cd $(mktemp -d /tmp/$1.XXXX)
}

# Asciidoc to Markdown conversion function, since pandoc can't do this natively.
# Pipe asciidoc to this function on STDIN, and it will write the markdown to
# STDOUT. Based on
# https://alvinalexander.com/bookmarks/how-convert-asciidoc-to-html-or-markdown
function asciidoc_to_markdown() {
  asciidoc -b docbook - | pandoc -from docbook -t markdown_strict --wrap none
}

# Useful for converting my asciidoc writing to docx format for services that
# require docx
function asciidoc_to_doc() {
  asciidoc -b docbook - | pandoc --from docbook --to docx
}

function asciidoc_to_kindle_note() {
  asciidoc -b docbook - | pandoc --from docbook --to epub || \
  # Print usage information if commands fails
  printf '\nUsage: cat notes.adoc | asciidoc_to_kindle_note > notes.epub\n' >&2
}

# Functions for opening various things from the command line
############################################################

os=$(uname -s)

# If we aren't on OSX create an `open` alias so we can use `open` on both OSes
if [[ "$os" = 'Linux' ]]; then
    function open() {
        xdg-open $@
    }
fi

search_string() {
    search=""

    for term in "$@"; do
        search="$search%20$term"
    done

    echo "$search"
}

function goo() {
    search_string "$@"
    open "http://www.google.com/search?q=$(search_string "$@")"
}

function duc() {
    search_string "$@"
    open "http://www.duckduckgo.com?q=$(search_string "$@")"
}

function open_ticket() {
  if [ -n "$BASE_TICKET_URL" ]; then
    open "$BASE_TICKET_URL$1"
  else
    echo "BASE_TICKET_URL is not set"
    return 1
  fi
}
