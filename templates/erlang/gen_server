%%%-------------------------------------------------------------------
%%% @doc
%%%
%%% @end
%%%-------------------------------------------------------------------
-module($basename).

-behaviour(gen_server).

%% API
-export([start_link/0]).

%% gen_server callbacks
-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

-define(SERVER, ?MODULE).

-record(state, {}).

-type state() :: #state{}.
-type from() :: {pid(), Tag :: term()}.

%%%===================================================================
%%% API
%%%===================================================================

%%--------------------------------------------------------------------
%% @doc
%% Starts the server
%%
%% @end
%%--------------------------------------------------------------------
-spec start_link() -> {ok, Pid :: pid()} | ignore | {error, Error :: any()}.

start_link() ->
    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).

%%%===================================================================
%%% gen_server callbacks
%%%===================================================================

-spec init(Args :: list()) -> {ok, State :: state()} |
                    {ok, State :: state(), Timeout :: integer()} |
                    ignore |
                    {stop, Reason :: any()}.

init([]) ->
    {ok, #state{}}.

-spec handle_call(Request :: any(), From :: from(), State :: state()) ->
                                  {reply, Reply :: any(), State :: state()} |
                                  {reply, Reply :: any(), State :: state(), Timeout :: integer()} |
                                  {noreply, State :: state()} |
                                  {noreply, State :: state(), Timeout :: integer()} |
                                  {stop, Reason :: any(), Reply :: any(), State :: state()} |
                                  {stop, Reason :: any(), State :: state()}.

handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

-spec handle_cast(Msg :: any(), State :: state()) -> {noreply, State :: state()} |
                                 {noreply, State :: state(), Timeout :: integer()} |
                                 {stop, Reason :: any(), State :: state()}.

handle_cast(_Msg, State) ->
    {noreply, State}.

-spec handle_info(Info :: any(), State :: state()) -> {noreply, State :: state()} |
                                  {noreply, State :: state(), Timeout :: integer()} |
                                  {stop, Reason :: any(), State :: state()}.

handle_info(_Info, State) ->
    {noreply, State}.

-spec terminate(Reason :: any(), State :: state()) -> void().

terminate(_Reason, _State) ->
    ok.

-spec code_change(OldVsn :: any(), State :: state(), Extra :: any()) ->
    {ok, NewState :: state()}.

code_change(_OldVsn, State, _Extra) ->
        {ok, State}.

%%%===================================================================
%%% Internal functions
%%%===================================================================
